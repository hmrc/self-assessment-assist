# Copyright 2022 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = self-assessment-assist
mtd-date = "2016-04-06"
# TODO: Find out what this does.


# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"
#play.http.requestHandler = "routing.VersionRoutingRequestHandler" //used in vat-api

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.audit.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"
#play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
play.modules.enabled += "uk.gov.hmrc.transactionalrisking.config.Module"

# Taken from vat-api
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
#play.modules.enabled += "config.DIModule"


# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  uk.gov.hmrc.transactionalrisking.controllers.TransactionalRiskingController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}


access-keys {
  xApiKey: "dummy-api-key"
}

auditing {
  enabled = false
  traceRequests = false
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}
# Api related config
api {
  1.0 {
    # The status of the API for the API Platform.
    status = "ALPHA"
    endpoints.enabled = true
  }
  # The context which the API will have via the API Platform http://API_GATEWAY/{api.gateway.context}/
  gateway.context = "individuals/self-assessment/assist"
}


microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    auth {
      host = localhost
      port = 8500
      enabled = true
    }

    # TODO It should be named after the actual downstream service (not "stubs")
    stubs {
      host = localhost
      port = 8343
    }
    # remove when find out how to remove stubs. Stubs currently needed for local environment.

    non-repudiation {
      host = localhost
      port = 8343
      numberOfRetries = 10
      initialDelay = 500 milliseconds
      submit-url = "/individuals/self-assessment-assist/submission/report"
    }

    rds {
      host = localhost
      port = 8343
      submit-url = "/rds/assessments/self-assessment-assist"
      acknowledge-url = "/rds/assessments/self-assessment-assist/acknowledge"
      clientId = stub-client-id
      clientSecret = stub-secret-id
    }

    cip-fraud-service {
      host = localhost
      port = 8343
      submit-url = "/fraud"
    }

# Placeholder. Put back in when service becomes available.
#    ifs {
#      host = localhost
#      port = 9772
#      env = Prod
#          #Check env
#      token = ABCD1234
#      environmentHeaders = ["Accept", "Gov-Test-Scenario", "Content-Type", "Location", "X-Request-Timestamp", "X-Session-Id", "X-Request-Id"]
#    }
  }
}


feature-switch {

  #Specifies which versions of the API to allow through the VersionRoutingRequestHandler
  version-1 {
    enabled = true
  }

  auth {
    enabled = true
  }
}
